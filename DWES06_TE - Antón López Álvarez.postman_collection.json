{
	"info": {
		"_postman_id": "44cecdbe-d67c-41a7-80bc-3f3e3e15b979",
		"name": "DWES06_TE - Ant√≥n L√≥pez √Ålvarez",
		"description": "Este fichero contiene las consultas para llevar a cabo las operaciones CRUD tanto en el backend (Items) como en el micrservicio (Usuarios).\n\nOperaciones disponibles:\n\n**BACKEND**\n\n1. **Obtener todos los √≠tems**: Devolver√° la lista completa con la informaci√≥n de cada disco.\n    \n2. **Consultar un √≠tem por su ID**: Devolver√° la informaci√≥n del √≠tem solicitado.\n    \n3. **Obtener √≠tems de un artista**: Recibir√°s todos los √≠tems de un artista concreto.\n    \n4. **Obtener √≠tems de un formato**: Devolver√° todos los √≠tems que se correspondan con el formato enviado.\n    \n5. **Ordenar √≠tems**: Devolver√° todos los √≠tems ordenados por la columna dada, y en el orden solicitado (ascendente o descendente).\n    \n6. **Crear un nuevo √≠tem**: A√±adir√° un nuevo √≠tem a la colecci√≥n.\n    \n7. **Modificar un √≠tem existente**: Actualiza los datos recibidos en el item correspondiente.\n    \n8. **Eliminar un √≠tem**: Elimina un post de la colecci√≥n.\n    \n\n**MICROSERVICIO**\n\n1. **Obtener todos los usuarios**: Devolver√° la lista completa de usuarios.\n    \n2. **Consultar un usuario por su ID**: Devolver√° la informaci√≥n del usuario solicitado.\n    \n3. **Crear un nuevo usuario**: A√±adir√° un nuevo usuario a la base de datos.\n    \n4. **Modificar un usuario**: Actualiza el usuario recibido.\n    \n5. **Eliminar un usuario**: Elimina el usuario correspondiente de la base de datos.\n    \n\nCada operaci√≥n de esta plantilla cuenta con instrucciones detalladas para enviar las peticiones.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39905534"
	},
	"item": [
		{
			"name": "Backend",
			"item": [
				{
					"name": "1: Obtener todos los √çtems",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item"
							]
						},
						"description": "Esta solicitud GET obtiene una lista de todos los √≠tems de la colecci√≥n musical.\n\n**Caso de uso:** Al pulsar enviar deber√≠a devolver la informaci√≥n de todos los √≠tems de la colecci√≥n.\n\nEn caso de √©xito devuelve el listado completo de √≠tems. En caso contrario devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "2: Obtener un √≠tem por su ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item/{{idget}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item",
								"{{idget}}"
							]
						},
						"description": "Esta solicitud GET obtiene un √≠tem espec√≠fico basado en su ID.\n\n**Caso de uso:** Si se cambia el valor de `10` en la URL al ID del √≠tem que quieres consultar, deber√≠a devolver los detalles de ese √≠tem en concreto.\n\nEn caso de √©xito devuelve el √≠tem correspondiente. En caso contrario devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "3: Obtener los √≠tems de un Artista",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item/artist/{{artist}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item",
								"artist",
								"{{artist}}"
							]
						},
						"description": "Esta solicitud GET obtiene todos los √≠tem de un artista espec√≠fico basado en su nombre.\n\n**Caso de uso:** Si se cambia el valor de `the-who` en la URL por el nombre del artista que queramos buscar, devolver√° todos los √≠tems que est√©n a nombre de ese artista. Puedes usar min√∫sculas y may√∫sculas indistintamente, es _case insensitive_.\n\nüëÅÔ∏è **¬°OJO!** Muchos nombres de artistas contienen espacios, para poder consultarlos tendr√°s que sustituir esos espacios por guiones. Ejemplo: si quieres buscar a _The Who_, puedes escribir _The-Who_, _the-who_, etc.\n\nEn caso de √©xito devuelve el listado de √≠tems correspondiente. En caso no √©xito devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "4: Obtener los √≠tems de un Formato",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item/format/{{format}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item",
								"format",
								"{{format}}"
							]
						},
						"description": "Esta solicitud GET obtiene todos los √≠tem que est√°n en un formato determinado, a partir del nombre de dicho formato.\n\n**Caso de uso:** Si se cambia el valor de `CD` en la URL por el nombre del formato que queramos buscar, devolver√° todos los √≠tems que est√©n en ese formato. Tambi√©n es _case insensitive_.\n\nEn caso de √©xito devuelve el listado de √≠tems correspondiente. En caso no √©xito devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "5: Obtener todos los √≠tems ordenados",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item/order/{{key}}/{{order}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item",
								"order",
								"{{key}}",
								"{{order}}"
							]
						},
						"description": "Esta solicitud GET obtiene todos los √≠tem ordenados por una clave dada. Este orden que puede ser ascendente o descendente.\n\n**Caso de uso:** Pon el nombre de una de las columnas de la tabla √≠tems en lugar de `{{key}}` y _asc_ o _desc_ en lugar de `{{order}}`. La aplicaci√≥n devolver√° todos los √≠tems ordenados seg√∫n ese criterio.\n\nüëÅÔ∏è ¬°OJO! Las claves son _case sensitive_. El orden (`asc` o `desc`) es _case insensitive_.\n\nEn caso de √©xito devuelve todos los √≠tems. En caso no √©xito devuelve el error generado.\n\nLista de las columnas disponibles para ordenar es: `id`, `title`, `artist`, `format`, `year`, `origYear`, `label`, `rating`, `comment`, `buyPrice`, `condition`, `sellPrice`.\n\nüëÅÔ∏è ¬°OJO! Ten en cuenta que no se puede ordenar por la clave `externalIds`, ya que es un array."
					},
					"response": []
				},
				{
					"name": "6: Crear un nuevo √≠tem",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\":\"Through the Looking Glass\",\n  \"artist\":\"Midori Takada\",\n  \"format\":\"CD\",\n  \"year\": 2017,\n  \"origYear\": 1983,\n  \"label\":\"WRWTFWW Records\",\n  \"rating\": 9,\n  \"comment\":\"Reedici√≥n suiza con descarga digital. Muy bueno.\",\n  \"buyPrice\": 20,\n  \"condition\":\"NM\",\n  \"sellPrice\": 28,\n  \"externalIds\":{\n    \"Discogs\":\"9975883\",\n    \"Musicbrainz\":\"76dccf5b-c8b0-44b1-93a8-fb739a066bc4\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item"
							]
						},
						"description": "Esta solicitud POST crea un nuevo √≠tem en la colecci√≥n musical.\n\n**Caso de uso:** En el cuerpo de la solicitud se incluir√° un JSON con todos los campos del √≠tem a crear, a excepci√≥n del ID, que lo generar√° la base de datos: `title`, `artist`, `format`, `year`, `origYear`, `label`, `rating`, `comment`, `buyPrice`, `condition`, `sellPrice`, `externalIds`.\n\nüëÅÔ∏è ¬°OJO! Para que se validen los datos se debe cumplir lo siguiente\n\n- Los campos year y originalYear deben estar entre 1901 y 2155 (tipo YEAR(4))\n    \n- El campo rating debe ser un entero entre 1 y 10 (incluidos)\n- Los campos buyPrice y sellPrice son numeros mayores o iguales que cero\n- El campo condition debe contener un valor de la Goldmine Grading Guide (M, NM, E, VG, G, P)\n    \n\nEn caso de √©xito devuelve el √≠tem creado. En caso no √©xito devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "7: Modificar un √≠tem",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"format\": \"3CD\",\n    \"year\": 2019,\n    \"origYear\": 1982,\n    \"externalIds\": {\n        \"Discogs\": \"25\",\n        \"Musicbrainz\": \"50\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item/{{idput}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item",
								"{{idput}}"
							]
						},
						"description": "Esta solicitud PUT actualiza un item en la base de datos bas√°ndose en su ID.\n\n**Caso de uso:** Si se cambia el valor de `id` al ID del √≠tem que se quiera actualizar, editando los nombres de las claves que queramos modificar (pueden ser todas o solo algunas) y sus valores en el cuerpo de la solicitud con los valores nuevos, se modificar√° el contenido de ese √≠tem.\n\nüëÅÔ∏è ¬°OJO!\n\n- No se puede modificar el campo de ID, y el valor de este debe existir en la tabla\n- Los campos year y originalYear deben ser enteros entre 1901 y 2155\n- El campo rating debe ser un entero entre 1 y 10 (incluidos)\n- Los campos buyPrice y sellPrice deben ser num√©ricos mayores o iguales que cero\n- El campo condition debe contener un valor de la Goldmine Grading Guide (M, NM, E, VG, G, P)\n    \n\nEn caso de √©xito devuelve el √≠tem actualizado. En caso no √©xito devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "8: Eliminar un √≠tem por su ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 14\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/item",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"item"
							]
						},
						"description": "Esta solicitud DELETE elimina un √≠tem de la colecci√≥n a partir de su ID.\n\n**Caso de uso:** Si se cambia el valor de `id` al ID del √≠tem que se quiera eliminar, este se eliminar√≠a de la colecci√≥n al recibir y procesar la solicitud.\n\nEn caso de √©xito devuelve el √≠tem eliminado. En caso no √©xito devuelve el error generado."
					},
					"response": []
				}
			]
		},
		{
			"name": "Microservicio",
			"item": [
				{
					"name": "1: Obtener todos los usuarios",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"user"
							]
						},
						"description": "Esta solicitud GET obtiene una lista de todos los usuarios.\n\n**Caso de uso:** Al pulsar enviar deber√≠a devolver la informaci√≥n de todos los usuarios de la colecci√≥n.\n\nEn caso de √©xito devuelve el listado completo de usuarios. En caso contrario devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "2: Obtener un usuario por su ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/user/{{iduserget}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"user",
								"{{iduserget}}"
							]
						},
						"description": "Esta solicitud GET obtiene un usuario espec√≠fico basado en su ID.\n\n**Caso de uso:** Si se cambia el valor de del parametro de la URL al ID del usuario que quieres consultar, deber√≠a devolver los detalles de ese usuario en concreto.\n\nEn caso de √©xito devuelve el usuario correspondiente. En caso contrario devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "3: Crear un nuevo usuario",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\":\"Inocencio Monge\",\n  \"correo\":\"innocentmonk@outlook.com\",\n  \"especialidad\":\"indie\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"user"
							]
						},
						"description": "Esta solicitud POST crea un nuevo usuario en la base de datos.\n\n**Caso de uso:** En el cuerpo de la solicitud se incluir√° un JSON con todos los campos del √≠tem a crear, a excepci√≥n del ID, que lo generar√° la base de datos: `nombre`, `correo` y `especialidad`.\n\nüëÅÔ∏è ¬°OJO! Para que se validen los datos se debe cumplir lo siguiente\n\n- Los campos no pueden estar vacios y deben tener como maximo 50 caracteres\n    \n- El correo debe ser una direccion valida de correo electronico\n    \n\nEn caso de √©xito devuelve el usuario creado. En caso no √©xito devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "4: Modificar un usuario",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"4\",\n    \"nombre\": \"Pepe Suances\",\n    \"correo\": \"longlengs88@gmail.com\",\n    \"especialidad\": \"post-punk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"user"
							]
						},
						"description": "Esta solicitud PUT actualiza un usuario en la base de datos bas√°ndose en su ID.\n\n**Caso de uso:** Si se cambia el valor de `id` al ID del usuario que se quiera actualizar, editando los valores en el cuerpo de la solicitud con los valores nuevos, se modificar√° el contenido de ese usuario.\n\nüëÅÔ∏è ¬°OJO!\n\n- No se puede modificar el campo de ID, y el valor de este debe existir en la tabla\n    \n- Se aplican las mismas validaciones que al crear el usuario.\n    \n\nEn caso de √©xito devuelve el usuario actualizado. En caso no √©xito devuelve el error generado."
					},
					"response": []
				},
				{
					"name": "5: Eliminar un usuario por su ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/lopez_alvarez_anton_DWES06_TE01/backend/public/api/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"lopez_alvarez_anton_DWES06_TE01",
								"backend",
								"public",
								"api",
								"user"
							]
						},
						"description": "Esta solicitud DELETE elimina un usuario de la colecci√≥n a partir de su ID.\n\n**Caso de uso:** Si se cambia el valor de `id` al ID del usuario que se quiera eliminar, este se eliminar√≠a de la base de datos al recibir y procesar la solicitud.\n\nEn caso de √©xito devuelve el usuario eliminado. En caso no √©xito devuelve el error generado."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "idput",
			"value": "14",
			"type": "string"
		},
		{
			"key": "artist",
			"value": "the-who",
			"type": "string"
		},
		{
			"key": "format",
			"value": "CD",
			"type": "string"
		},
		{
			"key": "key",
			"value": "buyPrice",
			"type": "string"
		},
		{
			"key": "order",
			"value": "DESC",
			"type": "string"
		},
		{
			"key": "idget",
			"value": "1",
			"type": "string"
		},
		{
			"key": "iduserget",
			"value": "1",
			"type": "string"
		},
		{
			"key": "iduserput",
			"value": "3",
			"type": "string"
		}
	]
}